from .utils import pre_parse, remove_noise_node, config, html2element, normalize_text
from golaxy_gne.extractor import ContentExtractor, TitleExtractor, TimeExtractor, AuthorExtractor, ListExtractor
from golaxy_gne.tool import replace_by_img_tag
import re
import json
from lxml import etree
from .tool import *
class GeneralNewsExtractor:

    # 图片提取，暂不应用
    def img_position(self,html,imgs:list):
        # len_img = len(img)
        imgs_parse = []
        count = 0
        for img in imgs:
            img_item = {}
            count+=1
            html = re.sub("<img.*?{}.*?>".format(img), "{img}",html)
            img_list_path0 = re.sub("<[^>]+>","",html)
            img_list_path0 = re.sub("\s+","",img_list_path0)
            img_item["img_path1"] = (img_list_path0.split("{img}")[0][-5:])
            img_item["img_path2"] =img_list_path0.split("{img}")[1][0:5]
            img_item["num"] = count
            imgs_parse.append(img_item)
        return imgs_parse

    # 图片提取
    def img_positionv2(self, html):
        imgs = re.findall("<img.*?\">",html)
        for img in imgs:
            html = re.sub(img, img+"<p>{img}</p>", html)
        return html

    def extract(self,
                html,
                title_xpath='',
                author_xpath='',
                publish_time_xpath='',
                host='',
                body_xpath='',
                noise_node_list=None,
                with_body_html=False):

        # 对 HTML 进行预处理可能会破坏 HTML 原有的结构，导致根据原始 HTML 编写的 XPath 不可用
        # 因此，如果指定了 title_xpath/author_xpath/publish_time_xpath，那么需要先提取再进行
        # 预处理
        # html = self.img_positionv2(html+"img")
        normal_html = normalize_text(html)
        doc = re.sub(r'<!--.*?-->','',normal_html)
        doc = re.sub(r'<meta.*?>', '', doc)
        doc = re.sub(r'<script>.*?</script>', '', doc)
        dr = re.compile(r'<[^>]+>', re.S)
        doc = dr.sub('', doc)

        pubtime_re=str_to_timestamp(doc)
        #print(pub_time)
        #增加稿件来源提取，采用正则方式
        source=''
        #results = re.search(r">*\s*[　]*来源\s*[：\-:](</em>)*\s*(\S*?)((<)|(\s)|(/)|(，)|(）|\"))", doc, re.M|re.I)
        #if '来源：' in doc:
            #print("*"*100)
        results = re.search(r">*\s*[　]*来源\s*[：\-:](</em>)*\s*(\S*?)((<)|(\s)|(/)|(，)|(）|\"))", doc, re.M | re.I)

        if results:
            source= results.group(2)
            source=source.strip()

        normal_html = normalize_text(html)

        element = html2element(normal_html)
        title = TitleExtractor().extract(element, title_xpath=title_xpath)
        publish_time = TimeExtractor().extractor(element, publish_time_xpath=publish_time_xpath)
        author = AuthorExtractor().extractor(element, author_xpath=author_xpath)
        element = pre_parse(element)
        remove_noise_node(element, noise_node_list)
        content = ContentExtractor().extract(element,
                                             host=host,
                                             with_body_html=with_body_html,
                                             body_xpath=body_xpath)
        pubtime_gne=str_to_timestamp(publish_time)
        publish_time=get_real_time(pubtime_re,pubtime_gne)
        "*图片处理1"
        content_data = content[0][1]['text']

        img_position = False
        if img_position:
            imgs_position = self.img_position(html, content[0][1]['images'])
            for img_position in imgs_position:

                content_data = content[0][1]['text']
                if len(re.findall(img_position["img_path1"],content_data))>0:
                    b = img_position["img_path1"]+"(.*?)"+img_position["img_path2"]
                    # print("content_data:",content_data)
                    content_data = re.sub(img_position["img_path1"]+"\s"+img_position["img_path2"],img_position["img_path1"]+"{img}"+img_position["img_path2"],str(content_data))
                # content_data = replace_by_img_tag(content_data)
        # print(content_data)
        content_data = replace_by_img_tag(content_data)
        result = {'title': title,
                  'author': author,
                  #'pub_time':publish_time,
                  'publish_time': publish_time,
                  'content': content_data,
                  'source':source,
                  'images': content[0][1]['images']
                  }
        if with_body_html or config.get('with_body_html', False):
            result['body_html'] = content[0][1]['body_html']
        return result


class ListPageExtractor:
    def extract(self, html, feature):
        normalize_html = normalize_text(html)
        element = html2element(normalize_html)
        extractor = ListExtractor()
        return extractor.extract(element, feature)
